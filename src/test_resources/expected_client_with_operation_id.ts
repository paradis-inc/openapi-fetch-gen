// THIS FILE IS AUTO-GENERATED BY openapi-fetch-gen.
// DO NOT EDIT THIS FILE MANUALLY.
// See Also: https://github.com/moznion/openapi-fetch-gen
import createClient, { type ClientOptions } from "openapi-fetch";
import type { components, paths } from "./schema.d.ts"; // generated by openapi-typescript

export class Client<HT extends Record<string, string>> {
  private readonly client;
  private readonly defaultHeaders: HT;

  constructor(clientOptions: ClientOptions, defaultHeaders?: HT) {
    this.client = createClient<paths>(clientOptions);
    this.defaultHeaders = defaultHeaders ?? ({} as HT);
  }

  /**
   * List users
   */
  async listUsers(params: {
    query: {
      page?: number;
      pageSize?: number;
      membershipType?: "REGULAR" | "PREMIUM" | "STUDENT";
    };
  }) {
    return await this.client.GET("/users", {
      params,
    });
  }

  /**
   * Create a new user
   */
  async createUser(body: {
    name: string;
    email: string;
    membershipType: "REGULAR" | "PREMIUM" | "STUDENT";
    address?: {
      postalCode?: string;
      street: string;
      city: string;
      country: string;
    };
  }) {
    return await this.client.POST("/users", {
      body,
    });
  }

  /**
   * Get user details
   */
  async getUserDetails(params: { path: { userId: string } }) {
    return await this.client.GET("/users/{userId}", {
      params,
    });
  }

  /**
   * Replace user
   */
  async replaceUser(
    params: { path: { userId: string } },
    body: {
      name: string;
      email: string;
      membershipType: "REGULAR" | "PREMIUM" | "STUDENT";
      address?: {
        postalCode?: string;
        street: string;
        city: string;
        country: string;
      };
    } & { id: string },
  ) {
    return await this.client.PUT("/users/{userId}", {
      params,
      body,
    });
  }

  /**
   * Delete user
   */
  async deleteUser(params: { path: { userId: string } }) {
    return await this.client.DELETE("/users/{userId}", {
      params,
    });
  }

  /**
   * Update user fields
   */
  async updateUserFields(
    params: { path: { userId: string } },
    body: {
      name?: string;
      email?: string;
      membershipType?: "REGULAR" | "PREMIUM" | "STUDENT";
      address?: {
        postalCode?: string;
        street: string;
        city: string;
        country: string;
      };
    },
  ) {
    return await this.client.PATCH("/users/{userId}", {
      params,
      body,
    });
  }

  /**
   * List user loans
   */
  async listUserLoans(params: { path: { userId: string } }) {
    return await this.client.GET("/users/{userId}/loans", {
      params,
    });
  }

  /**
   * Search users
   */
  async searchUsers(body: {
    name?: string;
    email?: string;
    joinedAfter?: string;
    membershipType?: "REGULAR" | "PREMIUM" | "STUDENT";
  }) {
    return await this.client.POST("/users/search", {
      body,
    });
  }

  /**
   * Bulk user import
   */
  async bulk_User_Imp_ort(body: { file?: string }) {
    return await this.client.POST("/users/bulk", {
      body,
    });
  }

  /**
   * Get bulk job status
   */
  async getUsersBulkJobid(
    params: [
      Exclude<
        // Missed Header Keys for default headers
        keyof {
          Authorization: string;
          "Application-Version": string;
          "Something-Id": string;
        },
        Extract<
          // Provided header keys by default headers' keys
          keyof HT,
          keyof {
            Authorization: string;
            "Application-Version": string;
            "Something-Id": string;
          }
        >
      >,
    ] extends [never]
      ? {
          header?: {
            Authorization: string;
            "Application-Version": string;
            "Something-Id": string;
          };
          path: { jobId: string };
        }
      : {
          header:
            | (Pick<
                // Pick the header keys that are not in the default headers
                {
                  Authorization: string;
                  "Application-Version": string;
                  "Something-Id": string;
                },
                Exclude<
                  // Missed Header Keys for default headers
                  keyof {
                    Authorization: string;
                    "Application-Version": string;
                    "Something-Id": string;
                  },
                  Extract<
                    // Provided header keys by default headers' keys
                    keyof HT,
                    keyof {
                      Authorization: string;
                      "Application-Version": string;
                      "Something-Id": string;
                    }
                  >
                >
              > &
                Partial<
                  // Disallow default headers' keys to be in the header param
                  Record<
                    Extract<
                      // Provided header keys by default headers' keys
                      keyof HT,
                      keyof {
                        Authorization: string;
                        "Application-Version": string;
                        "Something-Id": string;
                      }
                    >,
                    never
                  >
                >)
            | {
                Authorization: string;
                "Application-Version": string;
                "Something-Id": string;
              };
          path: { jobId: string };
        },
  ) {
    return await this.client.GET("/users/bulk/{jobId}", {
      params: {
        ...params,
        header: { ...this.defaultHeaders, ...params.header } as {
          Authorization: string;
          "Application-Version": string;
          "Something-Id": string;
        },
      },
    });
  }
}

export type Error = components["schemas"]["Error"];
export type User = components["schemas"]["User"];
export type Address = components["schemas"]["Address"];
export type UserCreate = components["schemas"]["UserCreate"];
export type UserUpdate = components["schemas"]["UserUpdate"];
export type UserPatch = components["schemas"]["UserPatch"];
export type UserList = components["schemas"]["UserList"];
export type UserPage = components["schemas"]["UserPage"];
export type Loan = components["schemas"]["Loan"];
export type Book = components["schemas"]["Book"];
export type BulkJobStatus = components["schemas"]["BulkJobStatus"];
export type ClientSchema = components["schemas"]["Client"];
export type schema_Something = components["schemas"]["schema-Something"];
