{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { execSync } from \"node:child_process\";\nimport fs from \"node:fs\";\nimport tmp from \"tmp\";\nimport {\n  type InterfaceDeclaration,\n  ModuleKind,\n  Node,\n  Project,\n  ScriptTarget,\n  type SourceFile,\n  SyntaxKind,\n} from \"ts-morph\";\n\n/**\n * Generates a TypeScript API client using openapi-fetch based on TypeScript interface definitions\n * generated by openapi-typescript.\n */\nexport function generateClient(schemaFilePath: string, relativeSchemaFilePath: string): string {\n  const project = new Project({\n    compilerOptions: {\n      target: ScriptTarget.Latest,\n      module: ModuleKind.ESNext,\n    },\n  });\n  const schemaFile = project.addSourceFileAtPath(schemaFilePath);\n\n  const pathsInterface = findInterface(schemaFile, \"paths\");\n  if (!pathsInterface) {\n    throw new Error(`Interface \"paths\" not found in ${schemaFilePath}`);\n  }\n  const componentsInterface = findInterface(schemaFile, \"components\");\n\n  return generateClientCode(\n    pathsInterface,\n    componentsInterface,\n    relativeSchemaFilePath,\n  );\n}\n\nfunction findInterface(\n  sourceFile: SourceFile,\n  interfaceName: string,\n): InterfaceDeclaration | undefined {\n  return sourceFile.getInterfaces().find((i) => i.getName() === interfaceName);\n}\n\ninterface EndpointInfo {\n  path: string;\n  httpMethod: string;\n  operationName: string;\n  operationId: string | null;\n  commentLines: string[];\n  paramsType: string | null;\n  bodyType: string | null;\n  headerType: string | null;\n}\n\nfunction generateClientCode(\n  pathsInterface: InterfaceDeclaration,\n  componentsInterface: InterfaceDeclaration | undefined,\n  relativeSchemaFilePath: string,\n): string {\n  const endpoints = extractEndpointsInfo(pathsInterface);\n\n  const clientClass = generateClientClass(endpoints\n  );\n\n  const code = [\n    \"// THIS FILE IS AUTO-GENERATED BY openapi-fetch-gen.\",\n    \"// DO NOT EDIT THIS FILE MANUALLY.\",\n    \"// See Also: https://github.com/moznion/openapi-fetch-gen\",\n    `import createClient, { type ClientOptions } from \"openapi-fetch\";`,\n    `import type { components, paths } from \"./${relativeSchemaFilePath}\"; // generated by openapi-typescript`,\n    \"\",\n    clientClass,\n    \"\",\n    ...generateSchemaTypes(componentsInterface),\n  ].join(\"\\n\");\n\n  const tempFile = tmp.fileSync({ postfix: \".ts\" }).name;\n  fs.writeFileSync(tempFile, code);\n  execSync(`npx biome check --write ${tempFile}`);\n  return fs.readFileSync(tempFile, \"utf-8\");\n}\n\nfunction generateSchemaTypes(\n  componentsInterface: InterfaceDeclaration | undefined,\n): string[] {\n  const schemasProperty = componentsInterface?.getProperty(\"schemas\");\n\n  const types = [];\n  if (schemasProperty) {\n    const schemasType = schemasProperty.getType();\n    for (const schema of schemasType.getProperties()) {\n      const schemaType = schema.getValueDeclaration()?.getType();\n      if (schemaType) {\n        const schemaName = schema.getName();\n        const schemaTypeName = (\n          schemaName + (schemaName === \"Client\" ? \"Schema\" : \"\")\n        )\n          .replaceAll(/-/g, \"_\")\n          .replaceAll(/\\./g, \"_\");\n        types.push(\n          `export type ${schemaTypeName} = components[\"schemas\"][\"${schema.getName()}\"];`,\n        );\n      }\n    }\n  }\n\n  return types;\n}\n\nfunction extractEndpointsInfo(\n  pathsInterface: InterfaceDeclaration,\n): EndpointInfo[] {\n  const endpoints: EndpointInfo[] = [];\n\n  for (const property of pathsInterface.getProperties()) {\n    const path = property.getName().replace(/['\"]/g, \"\");\n    const propertyType = property.getType();\n\n    const httpMethods = [\n      \"get\",\n      \"post\",\n      \"put\",\n      \"delete\",\n      \"patch\",\n      \"head\",\n      \"options\",\n    ];\n\n    for (const httpMethod of httpMethods) {\n      // Get the operation type\n      const methodProperty = propertyType.getProperty(httpMethod);\n      if (!methodProperty) {\n        continue;\n      }\n      if (methodProperty.getTypeAtLocation(property).getText() === \"never\") {\n        continue;\n      }\n\n      const commentLines: string[] = [];\n      let paramsType: string | null = null;\n      let requestBodyType: string | null = null;\n\n      const declarations = methodProperty.getDeclarations();\n      if (declarations.length <= 0) {\n        continue;\n      }\n      const decl = declarations[0];\n\n      if (!Node.isPropertySignature(decl)) {\n        continue;\n      }\n\n      const typeNode = decl.getTypeNodeOrThrow();\n\n      const operationId = (() => {\n        if (\n          Node.isIndexedAccessTypeNode(typeNode) &&\n          typeNode.getObjectTypeNode().getText() === \"operations\"\n        ) {\n          const indexTypeNode = typeNode.getIndexTypeNode();\n          if (\n            Node.isLiteralTypeNode(indexTypeNode) &&\n            indexTypeNode.getLiteral().getKind() === SyntaxKind.StringLiteral\n          ) {\n            return sanitizeForOperation(\n              indexTypeNode.getLiteral().getText().slice(1, -1),\n            );\n          }\n        }\n        return null;\n      })();\n\n      const paramProp = decl.getType().getPropertyOrThrow(\"parameters\");\n      const paramTypes = paramProp\n        .getTypeAtLocation(decl)\n        .getProperties()\n        .map((prop) => {\n          const propType = prop.getTypeAtLocation(decl);\n          const text = propType.getText();\n          const name = prop.getName();\n          if (text === \"never\") {\n            return { name, text: \"\" };\n          }\n          return { name, text };\n        })\n        .filter((kv) => kv[\"text\"] !== \"\");\n\n      const headerType = paramTypes.find((kv) => kv.name === \"header\");\n      if (headerType) {\n        // header exists in params\n        const nonHeaderParams = paramTypes\n          .filter((kv) => kv.name !== \"header\")\n          .map((kv) => `${kv.name}: ${kv.text}`)\n          .join(\"\\n\");\n\n        paramsType =\n          `[\n  Exclude< // Missed Header Keys for default headers\n    keyof ${headerType[\"text\"]},\n    Extract< // Provided header keys by default headers' keys\n      keyof HT, keyof ${headerType[\"text\"]}\n    >\n  >,\n] extends [never] ? ` +\n          // When the default headers cover all the headers (i.e. `Exclude<...>` derived as `never`),\n          // header parameter becomes optional (omitting or )overriding default headers.\n          `{\n    header?: ${headerType[\"text\"]},\n    ${nonHeaderParams}\n  } : ` + // Else, header parameter is required as either follows:\n          // 1. requires sorely missed header values\n          // 2. requires all the header values (overriding default headers)\n          `{\n    header:\n      | (Pick< // Pick the header keys that are not in the default headers\n          ${headerType[\"text\"]},\n          Exclude< // Missed Header Keys for default headers\n            keyof ${headerType[\"text\"]},\n            Extract< // Provided header keys by default headers' keys\n              keyof HT, keyof ${headerType[\"text\"]}\n            >\n          >\n        > &\n        Partial< // Disallow default headers' keys to be in the header param\n          Record<\n            Extract< // Provided header keys by default headers' keys\n              keyof HT, keyof ${headerType[\"text\"]}\n            >,\n            never\n          >\n        >)\n      | ${headerType[\"text\"]},\n    ${nonHeaderParams}\n}\n`;\n      } else {\n        const params = paramTypes\n          .map((kv) => `${kv.name}: ${kv.text}`)\n          .join(\"\\n\");\n        if (params !== \"\") {\n          paramsType = `{${params}}`;\n        }\n      }\n\n      const requestBodyProp = decl.getType().getProperty(\"requestBody\");\n      if (requestBodyProp) {\n        const t = requestBodyProp.getTypeAtLocation(decl);\n        if (t.getText() !== \"never\") {\n          const contentProp = t.getPropertyOrThrow(\"content\");\n          const contentType = contentProp.getTypeAtLocation(decl);\n          const contentTypeProps = contentType.getProperties();\n\n          if (contentTypeProps.length > 0 && contentTypeProps[0]) {\n            requestBodyType = contentTypeProps[0]\n              .getTypeAtLocation(decl)\n              .getText();\n          }\n        }\n      }\n\n      if (\"getJsDocs\" in decl && typeof decl.getJsDocs === \"function\") {\n        const jsDocs = decl.getJsDocs();\n        for (const d of jsDocs) {\n          const description = d.getDescription().trim();\n          if (description) {\n            commentLines.push(`* ${description}`);\n          }\n        }\n      }\n\n      const sanitizedPath = sanitizeForOperation(path);\n\n      // Generate a camelCase operation name\n      const pathSegments = sanitizedPath.split(\"_\");\n      const camelCasePath = pathSegments\n        .map((segment, index) => {\n          // First segment is lowercase, rest are capitalized\n          if (index === 0) return segment.toLowerCase();\n          return (\n            segment.charAt(0).toUpperCase() + segment.slice(1).toLowerCase()\n          );\n        })\n        .join(\"\");\n\n      const defaultOperationName = `${httpMethod}${camelCasePath.charAt(0).toUpperCase()}${camelCasePath.slice(1)}`;\n\n      endpoints.push({\n        path,\n        httpMethod,\n        operationName: defaultOperationName,\n        operationId,\n        commentLines,\n        paramsType,\n        bodyType: requestBodyType,\n        headerType: headerType ? headerType[\"text\"] : null,\n      });\n    }\n  }\n\n  return endpoints;\n}\n\nfunction generateClientClass(\n  endpoints: EndpointInfo[],\n  options: { useOperationId?: boolean } = {},\n): string {\n  const classCode = [\n    `export class Client<HT extends Record<string, string>> {\n       private readonly client;\n       private readonly defaultHeaders: HT;\n\n       constructor(clientOptions: ClientOptions, defaultHeaders?: HT) {\n         this.client = createClient<paths>(clientOptions);\n         this.defaultHeaders = defaultHeaders ?? ({} as HT);\n       }\n    `,\n  ];\n\n  // Generate class methods for each endpoint\n  for (const endpoint of endpoints) {\n    const {\n      path,\n      httpMethod,\n      operationName,\n      operationId,\n      commentLines,\n      paramsType,\n      bodyType,\n    } = endpoint;\n\n    const methodName =\n      options.useOperationId && operationId ? operationId : operationName;\n\n    // Add JSDoc comment if available\n    if (commentLines.length > 0) {\n      classCode.push(\"    /**\");\n      for (const line of commentLines) {\n        classCode.push(`     ${line}`);\n      }\n      classCode.push(\"     */\");\n    }\n\n    // Method signature\n    classCode.push(`    async ${methodName}(`);\n\n    // Add method parameters with proper indentation\n    const paramsList = [];\n    if (paramsType) {\n      paramsList.push(`params: ${paramsType}`);\n    }\n\n    if (bodyType) {\n      // Properly indent the body by ensuring it starts with correct indentation\n      paramsList.push(`body: ${bodyType}`);\n    }\n\n    if (paramsList.length > 0) {\n      classCode.push(paramsList.join(\",\\n\"));\n    }\n\n    classCode.push(\"    ) {\");\n\n    // Method body\n    classCode.push(\n      `        return await this.client.${httpMethod.toUpperCase()}(\"${path}\", {`,\n    );\n\n    if (paramsType) {\n      if (endpoint.headerType) {\n        classCode.push(`params: {\n  ...params,\n  header: {...this.defaultHeaders, ...params.header} as ${endpoint.headerType},\n},`);\n      } else {\n        classCode.push(\"params,\");\n      }\n    }\n\n    if (bodyType) {\n      classCode.push(\"            body,\");\n    }\n\n    classCode.push(\"        });\");\n    classCode.push(\"    }\");\n    classCode.push(\"\");\n  }\n\n  classCode.push(\"}\");\n  classCode.push(\"\");\n\n  return classCode.join(\"\\n\");\n}\n\nfunction sanitizeForOperation(operation: string): string {\n  return operation\n    .replace(/[{}]/g, \"\")\n    .replace(/[-/.]/g, \"_\")\n    .replace(/^_/, \"\"); // Remove leading underscore if present\n}\n"]}